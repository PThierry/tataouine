# __________________gdb options_________________

# set to 1 to have ARM target debugging as default, use the "arm" command to switch inside gdb
set $ARM = 1
# set to 0 if you have problems with the colorized prompt - reported by Plouj with Ubuntu gdb 7.2
set $COLOREDPROMPT = 1
# color the first line of the disassembly - default is green, if you want to change it search for
# SETCOLOR1STLINE and modify it :-)
set $SETCOLOR1STLINE = 1
# set to 0 to remove display of objectivec messages (default is 1)
set $SHOWOBJECTIVEC = 1
# set to 0 to remove display of cpu registers (default is 1)
set $SHOWCPUREGISTERS = 1
# set to 1 to enable display of stack (default is 0)
set $SHOWSTACK = 0
# set to 1 to enable display of data window (default is 0)
set $SHOWDATAWIN = 0
# set to 0 to disable colored display of changed registers
set $SHOWREGCHANGES = 1
# set to 1 so skip command to execute the instruction at the new location
# by default it EIP/RIP will be modified and update the new context but not execute the instruction
set $SKIPEXECUTE = 0
# if $SKIPEXECUTE is 1 configure the type of execution
# 1 = use stepo (do not get into calls), 0 = use stepi (step into calls)
set $SKIPSTEP = 0
# show the ARM opcodes - change to 0 if you don't want such thing (in x/i command)
set $ARMOPCODES = 0
# x86 disassembly flavor: 0 for Intel, 1 for AT&T
set $X86FLAVOR = 0
# use colorized output or not
set $USECOLOR = 1
# to use with remote KDP
set $KDP64BITS = -1
set $64BITS = 0

set confirm off
set verbose on
set history filename ~/.gdb_history
set history save

set output-radix 0x10
set input-radix 0x10

# These make gdb never pause in its output
set height 0
set width 0

set $SHOW_CONTEXT = 1
set $SHOW_NEST_INSN = 1

set $CONTEXTSIZE_STACK = 6
set $CONTEXTSIZE_DATA  = 8
set $CONTEXTSIZE_CODE  = 8

# __________________end gdb options_________________
#

# __________________color functions_________________
#
# color codes
set $BLACK = 0
set $RED = 1
set $GREEN = 2
set $YELLOW = 3
set $BLUE = 4
set $MAGENTA = 5
set $CYAN = 6
set $WHITE = 7

# CHANGME: If you want to modify the "theme" change the colors here
#          or just create a ~/.gdbinit.local and set these variables there
set $COLOR_REGNAME = $GREEN
set $COLOR_REGVAL = $BLACK
set $COLOR_REGVAL_MODIFIED  = $RED
set $COLOR_SEPARATOR = $BLUE
set $COLOR_CPUFLAGS = $RED

set $COLOR_FIELDNAME = $RED
set $COLOR_FIELDVALUE = $GREEN

# this is ugly but there's no else if available :-(
define color
 if $USECOLOR == 1
 	# BLACK
 	if $arg0 == 0
 		echo \033[30m
 	else
 		# RED
	 	if $arg0 == 1
	 		echo \033[31m
	 	else
	 		# GREEN
	 		if $arg0 == 2
	 			echo \033[32m
	 		else
	 			# YELLOW
	 			if $arg0 == 3
	 				echo \033[33m
	 			else
	 				# BLUE
	 				if $arg0 == 4
	 					echo \033[34m
	 				else
	 					# MAGENTA
	 					if $arg0 == 5
	 						echo \033[35m
	 					else
	 						# CYAN
	 						if $arg0 == 6
	 							echo \033[36m
	 						else
	 							# WHITE
	 							if $arg0 == 7
	 								echo \033[37m
	 							end
	 						end
	 					end
	 				end
	 			end
	 		end
	 	end
	 end
 end
end

define color_reset
    if $USECOLOR == 1
	   echo \033[0m
    end
end

define color_bold
    if $USECOLOR == 1
	   echo \033[1m
    end
end

define color_underline
    if $USECOLOR == 1
	   echo \033[4m
    end
end

# this way anyone can have their custom prompt - argp's idea :-)
# can also be used to redefine anything else in particular the colors aka theming
# just remap the color variables defined above
source ~/.gdbinit.local

# can't use the color functions because we are using the set command
if $COLOREDPROMPT == 1
	set prompt \033[31mgdb$ \033[0m
end

# Initialize these variables else comparisons will fail for coloring
# we must initialize all of them at once, 32 and 64 bits, and ARM.
set $oldrax = 0
set $oldrbx = 0
set $oldrcx = 0
set $oldrdx = 0
set $oldrsi = 0
set $oldrdi = 0
set $oldrbp = 0
set $oldrsp = 0
set $oldr8  = 0
set $oldr9  = 0
set $oldr10 = 0
set $oldr11 = 0
set $oldr12 = 0
set $oldr13 = 0
set $oldr14 = 0
set $oldr15 = 0
set $oldeax = 0
set $oldebx = 0
set $oldecx = 0
set $oldedx = 0
set $oldesi = 0
set $oldedi = 0
set $oldebp = 0
set $oldesp = 0
set $oldr0  = 0
set $oldr1  = 0
set $oldr2  = 0
set $oldr3  = 0
set $oldr4  = 0
set $oldr5  = 0
set $oldr6  = 0
set $oldr7  = 0
set $oldsp  = 0
set $oldlr  = 0


# ______________window size control___________
define contextsize-stack
    if $argc != 1
        help contextsize-stack
    else
        set $CONTEXTSIZE_STACK = $arg0
    end
end
document contextsize-stack
Syntax: contextsize-stack NUM
| Set stack dump window size to NUM lines.
end


define contextsize-data
    if $argc != 1
        help contextsize-data
    else
        set $CONTEXTSIZE_DATA = $arg0
    end
end
document contextsize-data
Syntax: contextsize-data NUM
| Set data dump window size to NUM lines.
end


define contextsize-code
    if $argc != 1
        help contextsize-code
    else
        set $CONTEXTSIZE_CODE = $arg0
    end
end
document contextsize-code
Syntax: contextsize-code NUM
| Set code window size to NUM lines.
end


# _____________breakpoint aliases_____________
define bpl
    info breakpoints
end
document bpl
Syntax: bpl
| List all breakpoints.
end


define bp
    if $argc != 1
        help bp
    else
        break $arg0
    end
end
document bp
Syntax: bp LOCATION
| Set breakpoint.
| LOCATION may be a line number, function name, or "*" and an address.
| To break on a symbol you must enclose symbol name inside "".
| Example:
| bp "[NSControl stringValue]"
| Or else you can use directly the break command (break [NSControl stringValue])
end


define bpc
    if $argc != 1
        help bpc
    else
        clear $arg0
    end
end
document bpc
Syntax: bpc LOCATION
| Clear breakpoint.
| LOCATION may be a line number, function name, or "*" and an address.
end


define bpe
    if $argc != 1
        help bpe
    else
        enable $arg0
    end
end
document bpe
Syntax: bpe NUM
| Enable breakpoint with number NUM.
end


define bpd
    if $argc != 1
        help bpd
    else
        disable $arg0
    end
end
document bpd
Syntax: bpd NUM
| Disable breakpoint with number NUM.
end


define bpt
    if $argc != 1
        help bpt
    else
        tbreak $arg0
    end
end
document bpt
Syntax: bpt LOCATION
| Set a temporary breakpoint.
| This breakpoint will be automatically deleted when hit!.
| LOCATION may be a line number, function name, or "*" and an address.
end


define bpm
    if $argc != 1
        help bpm
    else
        awatch $arg0
    end
end
document bpm
Syntax: bpm EXPRESSION
| Set a read/write breakpoint on EXPRESSION, e.g. *address.
end


define bhb
    if $argc != 1
        help bhb
    else
        hb $arg0
    end
end
document bhb
Syntax: bhb LOCATION
| Set hardware assisted breakpoint.
| LOCATION may be a line number, function name, or "*" and an address.
end


define bht
    if $argc != 1
        help bht
    else
        thbreak $arg0
    end
end
document bht
Usage: bht LOCATION
| Set a temporary hardware breakpoint.
| This breakpoint will be automatically deleted when hit!
| LOCATION may be a line number, function name, or "*" and an address.
end


# ______________process information____________
define stack
    if $argc == 0
        info stack
    end
    if $argc == 1
        info stack $arg0
    end
    if $argc > 1
        help stack
    end
end
document stack
Syntax: stack <COUNT>
| Print backtrace of the call stack, or innermost COUNT frames.
end


define frame
    info frame
    info args
    info locals
end
document frame
Syntax: frame
| Print stack frame.
end

define tasks
    set $maxtask = 9
    set $task = 0
    while ($task <= $maxtask)
      # T0
      color $BLUE
      printf "=====================================================================\n"
      color $CYAN
      printf "T%x.name :   ", $task
      color $COLOR_FIELDVALUE
      printf "%s\n", tasks_list[$task].name
      color $COLOR_FIELDNAME
      printf "T%x.id :     ", $task
      color $COLOR_FIELDVALUE
      printf "%x\t", tasks_list[$task].id
      color $COLOR_FIELDNAME
      printf "T%x.fn :     ", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\t", tasks_list[$task].fn
      color $COLOR_FIELDNAME
      printf "T%x.type :   ", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\t", tasks_list[$task].type
      color $COLOR_FIELDNAME
      printf "T%x.mode :   ", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\n", tasks_list[$task].mode

      color $COLOR_FIELDNAME
      printf "T%x.numdevs: ", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\t", tasks_list[$task].num_devs
      color $COLOR_FIELDNAME
      printf "T%x.ndmapped:", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\t\t", tasks_list[$task].num_devs_mmapped
      color $COLOR_FIELDNAME
      printf "T%x.num_tim: ", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\t", tasks_list[$task].num_timers
      color $COLOR_FIELDNAME
      printf "T%x.num_dmas:", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\n", tasks_list[$task].num_dmas

      color $COLOR_FIELDNAME
      printf "T%x.ram_start:", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\t", tasks_list[$task].ram_slot_start
      color $COLOR_FIELDNAME
      printf "T%x.ram_end:  ", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\t", tasks_list[$task].ram_slot_end
      color $COLOR_FIELDNAME
      printf "T%x.txt_start:", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\t", tasks_list[$task].txt_slot_start
      color $COLOR_FIELDNAME
      printf "T%x.txt_end:  ", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\n", tasks_list[$task].txt_slot_end

      color $COLOR_FIELDNAME
      printf "T%x.state[MT]:  ", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\t", tasks_list[$task].state[0]
      color $COLOR_FIELDNAME
      printf "T%x.state[ISR]:", $task
      color $COLOR_FIELDVALUE
      printf "0x%x\t", tasks_list[$task].state[1]
      color $COLOR_FIELDNAME
      printf "T%x.ctx[MT].frame:", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\t", tasks_list[$task].ctx[0].frame
      color $COLOR_FIELDNAME
      printf "T%x.ctx[ISR].frame:", $task
      color $COLOR_FIELDVALUE
      printf "0x%08x\n", tasks_list[$task].ctx[1].frame

      set $task = $task + 1
  end
  color $BLUE
  printf "=====================================================================\n"
  color_reset
end
 

define reg
    printf "  "
    # R0
    color $COLOR_REGNAME
    printf "R0:"
    if ($r0 != $oldr0 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r0
    # R1
    color $COLOR_REGNAME
    printf "R1:"
    if ($r1 != $oldr1 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r1
	# R2
    color $COLOR_REGNAME
    printf "R2:"
    if ($r2 != $oldr2 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r2
	# R3
    color $COLOR_REGNAME
    printf "R3:"
    if ($r3 != $oldr3 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X\n", $r3
    printf "  "
	# R4
    color $COLOR_REGNAME
    printf "R4:"
    if ($r4 != $oldr4 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r4
    # R5
    color $COLOR_REGNAME
    printf "R5:"
    if ($r5 != $oldr5 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r5
	# R6
    color $COLOR_REGNAME
    printf "R6:"
    if ($r6 != $oldr6 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r6
	# R7
    color $COLOR_REGNAME
    printf "R7:"
    if ($r7 != $oldr7 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X\n", $r7
    printf "  "
	# R8
    color $COLOR_REGNAME
    printf "R8:"
    if ($r8 != $oldr8 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r8
	# R9
    color $COLOR_REGNAME
    printf "R9:"
    if ($r9 != $oldr9 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r9
	# R10
    color $COLOR_REGNAME
    printf "R10:"
    if ($r10 != $oldr10 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r10
	# R11
    color $COLOR_REGNAME
    printf "R11:"
    if ($r11 != $oldr11 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X ", $r11
    #dumpjump
    printf "\n"
    # R12
    color $COLOR_REGNAME
    printf "  R12:"
    if ($r12 != $oldr12 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X", $r12
    printf "  "
    # SP
    color $COLOR_REGNAME
    printf "SP:"
    if ($sp != $oldsp && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $sp
	# LR
    color $COLOR_REGNAME
    printf "LR:"
    if ($lr != $oldlr && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $lr
	# PC
    color $COLOR_REGNAME
    printf "PC:"
    color $COLOR_REGVAL_MODIFIED
    printf "  0x%08X  ", $pc
    #color_bold
    #color_underline
    #color $COLOR_CPUFLAGS
    #flags
	color_reset
    printf "\n"

    if ($SHOWREGCHANGES == 0)
	        set $oldr0  = $r0
	        set $oldr1  = $r1
	        set $oldr2  = $r2
	        set $oldr3  = $r3
	        set $oldr4  = $r4
	        set $oldr5  = $r5
	        set $oldr6  = $r6
	        set $oldr7  = $r7
	        set $oldr8  = $r8
    		set $oldr9  = $r9
	    	set $oldr10 = $r10
		    set $oldr11 = $r11
            set $oldr12 = $r12
			set $oldsp  = $sp
			set $oldlr  = $lr
	end
	color_reset

end
document reg
Syntax: reg
| Print CPU registers.
end



define func
    if $argc == 0
        info functions
    end
    if $argc == 1
        info functions $arg0
    end
    if $argc > 1
        help func
    end
end
document func
Syntax: func <REGEXP>
| Print all function names in target, or those matching REGEXP.
end


define var
    if $argc == 0
        info variables
    end
    if $argc == 1
        info variables $arg0
    end
    if $argc > 1
        help var
    end
end
document var
Syntax: var <REGEXP>
| Print all global and static variable names (symbols), or those matching REGEXP.
end

define sig
    if $argc == 0
        info signals
    end
    if $argc == 1
        info signals $arg0
    end
    if $argc > 1
        help sig
    end
end
document sig
Syntax: sig <SIGNAL>
| Print what debugger does when program gets various signals.
| Specify a SIGNAL as argument to print info on that signal only.
end


define threads
    info threads
end
document threads
Syntax: threads
| Print threads in target.
end


define dis
    if $argc == 0
        disassemble
    end
    if $argc == 1
        disassemble $arg0
    end
    if $argc == 2
        disassemble $arg0 $arg1
    end
    if $argc > 2
        help dis
    end
end
document dis
Syntax: dis <ADDR1> <ADDR2>
| Disassemble a specified section of memory.
| Default is to disassemble the function surrounding the PC (program counter) of selected frame.
| With one argument, ADDR1, the function surrounding this address is dumped.
| Two arguments are taken as a range of memory to dump.
end


# __________hex/ascii dump an address_________
define ascii_char
    if $argc != 1
        help ascii_char
    else
        # thanks elaine :)
        set $_c = *(unsigned char *)($arg0)
        if ($_c < 0x20 || $_c > 0x7E)
            printf "."
        else
            printf "%c", $_c
        end
    end
end
document ascii_char
Syntax: ascii_char ADDR
| Print ASCII value of byte at address ADDR.
| Print "." if the value is unprintable.
end


define hex_quad
    if $argc != 1
        help hex_quad
    else
        printf "%02X %02X %02X %02X %02X %02X %02X %02X", \
               *(unsigned char*)($arg0), *(unsigned char*)($arg0 + 1),     \
               *(unsigned char*)($arg0 + 2), *(unsigned char*)($arg0 + 3), \
               *(unsigned char*)($arg0 + 4), *(unsigned char*)($arg0 + 5), \
               *(unsigned char*)($arg0 + 6), *(unsigned char*)($arg0 + 7)
    end
end
document hex_quad
Syntax: hex_quad ADDR
| Print eight hexadecimal bytes starting at address ADDR.
end


define hexdump
    if $argc == 1
        hexdump_aux $arg0
	else
		if $argc == 2
			set $_count = 0
			while ($_count < $arg1)
				set $_i = ($_count * 0x10)
				hexdump_aux $arg0+$_i
				set $_count++
			end
		else
			help hexdump
		end
    end
end
document hexdump
Syntax: hexdump ADDR <NR_LINES>
| Display a 16-byte hex/ASCII dump of memory starting at address ADDR.
| Optional parameter is the number of lines to display if you want more than one.
end


define hexdump_aux
    if $argc != 1
        help hexdump_aux
    else
    	color_bold
        if ($64BITS == 1)
            printf "0x%016lX : ", $arg0
        else
            printf "0x%08X : ", $arg0
        end
        color_reset
        hex_quad $arg0
        color_bold
        printf " - "
        color_reset
        hex_quad $arg0+8
        printf " "
        color_bold
        ascii_char $arg0+0x0
        ascii_char $arg0+0x1
        ascii_char $arg0+0x2
        ascii_char $arg0+0x3
        ascii_char $arg0+0x4
        ascii_char $arg0+0x5
        ascii_char $arg0+0x6
        ascii_char $arg0+0x7
        ascii_char $arg0+0x8
        ascii_char $arg0+0x9
        ascii_char $arg0+0xA
        ascii_char $arg0+0xB
        ascii_char $arg0+0xC
        ascii_char $arg0+0xD
        ascii_char $arg0+0xE
        ascii_char $arg0+0xF
        color_reset
        printf "\n"
    end
end
document hexdump_aux
Syntax: hexdump_aux ADDR
| Display a 16-byte hex/ASCII dump of memory at address ADDR.
end


# _______________data window__________________
define ddump
    if $argc != 1
        help ddump
    else
        color $COLOR_SEPARATOR
        if $ARM == 1
            printf "[0x%08X]", $data_addr
        else
            if ($64BITS == 1)
                printf "[0x%04X:0x%016lX]", $ds, $data_addr
            else
                printf "[0x%04X:0x%08X]", $ds, $data_addr
            end
        end

    	color $COLOR_SEPARATOR
    	printf "------------------------"
        printf "-------------------------------"
        if ($64BITS == 1)
            printf "-------------------------------------"
	    end
	    color_bold
	    color $COLOR_SEPARATOR
	    printf "[data]\n"
        color_reset
        set $_count = 0
        while ($_count < $arg0)
            set $_i = ($_count * 0x10)
            hexdump $data_addr+$_i
            set $_count++
        end
    end
end
document ddump
Syntax: ddump NUM
| Display NUM lines of hexdump for address in $data_addr global variable.
end


define dd
    if $argc != 1
        help dd
    else
        set $data_addr = $arg0
        ddump 0x10
    end
end
document dd
Syntax: dd ADDR
| Display 16 lines of a hex dump of address starting at ADDR.
end


define datawin
        if ((($r0 >> 0x18) == 0x40) || (($r0 >> 0x18) == 0x08) || (($r0 >> 0x18) == 0xBF))
            set $data_addr = $r0
        else
            if ((($r1 >> 0x18) == 0x40) || (($r1 >> 0x18) == 0x08) || (($r1 >> 0x18) == 0xBF))
                set $data_addr = $r1
            else
                if ((($r2 >> 0x18) == 0x40) || (($r2 >> 0x18) == 0x08) || (($r2 >> 0x18) == 0xBF))
                    set $data_addr = $r2
                else
                    set $data_addr = $sp
                end
            end
        end
    ddump $CONTEXTSIZE_DATA
end
document datawin
Syntax: datawin
| Display valid address from one register in data window.
| Registers to choose are: esi, edi, eax, or esp.
end



# _______________process context______________
# initialize variable
set $displayobjectivec = 0

define context
    color $COLOR_SEPARATOR
    if $SHOWCPUREGISTERS == 1
        printf "----------------------------------------"
        printf "----------------------------------------"
	    color $COLOR_SEPARATOR
	    color_bold
	    printf "[regs]\n"
	    color_reset
	    reg
	    color $CYAN
    end
    color_reset
    # and this is the end of this little crap
    if $SHOWDATAWIN == 1
        datawin
    end
    color_reset
    color $COLOR_SEPARATOR
    printf "--------------------------------------------"
    printf "--------------------------------------------"
	color $COLOR_SEPARATOR
	color_bold
    printf "[code]\n"
    color_reset
    set $context_i = $CONTEXTSIZE_CODE
    if ($context_i > 0)
        if ($SETCOLOR1STLINE == 1)
	        color $GREEN
    	    x/i $pc
	        color_reset
	    else
            x/i $pc
	    end
        set $context_i--
    end
    while ($context_i > 0)
        x /i
        set $context_i--
    end
    color $COLOR_SEPARATOR
    printf "----------------------------------------"
    printf "----------------------------------------"
	printf "\n"
    color_reset
end
document context
Syntax: context
| Print context window, i.e. regs, stack, ds:esi and disassemble cs:eip.
end


define context-on
    set $SHOW_CONTEXT = 1
    printf "Displaying of context is now ON\n"
end
document context-on
Syntax: context-on
| Enable display of context on every program break.
end


define context-off
    set $SHOW_CONTEXT = 0
    printf "Displaying of context is now OFF\n"
end
document context-off
Syntax: context-off
| Disable display of context on every program break.
end


# _______________process control______________
define n
    if $argc == 0
        nexti
    end
    if $argc == 1
        nexti $arg0
    end
    if $argc > 1
        help n
    end
end
document n
Syntax: n <NUM>
| Step one instruction, but proceed through subroutine calls.
| If NUM is given, then repeat it NUM times or till program stops.
| This is alias for nexti.
end


define go
    if $argc == 0
        stepi
    end
    if $argc == 1
        stepi $arg0
    end
    if $argc > 1
        help go
    end
end
document go
Syntax: go <NUM>
| Step one instruction exactly.
| If NUM is given, then repeat it NUM times or till program stops.
| This is alias for stepi.
end


define pret
    finish
end
document pret
Syntax: pret
| Execute until selected stack frame returns (step out of current call).
| Upon return, the value returned is printed and put in the value history.
end


define init
    set $SHOW_NEST_INSN = 0
    tbreak _init
    r
end
document init
Syntax: init
| Run program and break on _init().
end


define start
    set $SHOW_NEST_INSN = 0
    tbreak _start
    r
end
document start
Syntax: start
| Run program and break on _start().
end


define sstart
    set $SHOW_NEST_INSN = 0
    tbreak __libc_start_main
    r
end
document sstart
Syntax: sstart
| Run program and break on __libc_start_main().
| Useful for stripped executables.
end


define main
    set $SHOW_NEST_INSN = 0
    tbreak main
    r
end
document main
Syntax: main
| Run program and break on main().
end

# ____________________patch___________________
# the usual nops are mov r0,r0 for arm (0xe1a00000)
# and mov r8,r8 in Thumb (0x46c0)
# armv7 has other nops
# FIXME: make sure that the interval fits the 32bits address for arm and 16bits for thumb
# status: works, fixme
define nop
    if ($argc > 2 || $argc == 0)
        help nop
    end

        if ($argc == 1)
            if ($cpsr->t &1)
                # thumb
                set *(short *)$arg0 = 0x46c0
            else
                # arm
                set *(int *)$arg0 = 0xe1a00000
            end
        else
        	set $addr = $arg0
        	if ($cpsr->t & 1)
    	    	# thumb
			    while ($addr < $arg1)
				    set *(short *)$addr = 0x46c0
				    set $addr = $addr + 2
		    	end
	    	else
		    	# arm
		    	while ($addr < $arg1)
			    	set *(int *)$addr = 0xe1a00000
			    	set $addr = $addr + 4
			    end
		    end
        end
end
document nop
Syntax: nop ADDR1 [ADDR2]
| Patch a single byte at address ADDR1, or a series of bytes between ADDR1 and ADDR2 to a NOP (0x90) instruction.
| ARM or Thumb code will be patched accordingly.
end


define null
    if ( $argc >2 || $argc == 0)
        help null
    end

    if ($argc == 1)
	    set *(unsigned char *)$arg0 = 0
    else
	    set $addr = $arg0
    	while ($addr < $arg1)
	        set *(unsigned char *)$addr = 0
		    set $addr = $addr +1
	    end
    end
end
document null
Syntax: null ADDR1 [ADDR2]
| Patch a single byte at address ADDR1 to NULL (0x00), or a series of bytes between ADDR1 and ADDR2.
end

# FIXME: thumb breakpoint ?
define int3
    if $argc != 1
        help int3
    else
        if $ARM == 1
            set $ORIGINAL_INT3 = *(unsigned int *)$arg0
            set $ORIGINAL_INT3ADDRESS = $arg0
            set *(unsigned int*)$arg0 = 0xe7ffdefe
        else
            # save original bytes and address
            set $ORIGINAL_INT3 = *(unsigned char *)$arg0
            set $ORIGINAL_INT3ADDRESS = $arg0
            # patch
            set *(unsigned char *)$arg0 = 0xCC
        end
    end
end
document int3
Syntax int3 ADDR
| Patch byte at address ADDR to an INT3 (0xCC) instruction or the equivalent software breakpoint for ARM.
end


define rint3
    if $ARM == 1
      	set *(unsigned int *)$ORIGINAL_INT3ADDRESS = $ORIGINAL_INT3
	    set $pc = $ORIGINAL_INT3ADDRESS
    else
    	set *(unsigned char *)$ORIGINAL_INT3ADDRESS = $ORIGINAL_INT3
    	if ($64BITS == 1)
        	set $rip = $ORIGINAL_INT3ADDRESS
    	else
    	    set $eip = $ORIGINAL_INT3ADDRESS
    	end
	end
end
document rint3
Syntax: rint3
| Restore the original byte previous to int3 patch issued with "int3" command.
end

define patch
    if $argc != 3
        help patch
    end
    set $patchaddr = $arg0
    set $patchbytes = $arg1
    set $patchsize = $arg2

    if ($patchsize == 1)
        set *(unsigned char*)$patchaddr = $patchbytes
    end
    if ($patchsize == 2)
        set $lendianbytes = (unsigned short)(($patchbytes << 8) | ($patchbytes >> 8))
        set *(unsigned short*)$patchaddr = $lendianbytes
    end
    if ($patchsize == 4)
        set $lendianbytes = (unsigned int)( (($patchbytes << 8) & 0xFF00FF00 ) | (($patchbytes >> 8) & 0xFF00FF ))
        set $lendianbytes = (unsigned int)($lendianbytes << 0x10 | $lendianbytes >> 0x10)
        set *(unsigned int*)$patchaddr = $lendianbytes
    end
    if ($patchsize == 8)
        set $lendianbytes = (unsigned long long)( (($patchbytes << 8) & 0xFF00FF00FF00FF00ULL ) | (($patchbytes >> 8) & 0x00FF00FF00FF00FFULL ) )
        set $lendianbytes = (unsigned long long)( (($lendianbytes << 0x10) & 0xFFFF0000FFFF0000ULL ) | (($lendianbytes >> 0x10) & 0x0000FFFF0000FFFFULL ) )
        set $lendianbytes = (unsigned long long)( ($lendianbytes << 0x20) | ($lendianbytes >> 0x20) )
        set *(unsigned long long*)$patchaddr = $lendianbytes
    end
end
document patch
Syntax: patch address bytes size
| Patch a given address, converting the bytes to little-endian.
| Assumes input bytes are unsigned values and should be in hexadecimal format (0x...).
| Size must be 1, 2, 4, 8 bytes.
| Main purpose is to be used with the output from the asm commands.
end

# ____________________cflow___________________
define print_insn_type
    if $argc != 1
        help print_insn_type
    else
        if ($arg0 < 0 || $arg0 > 5)
            printf "UNDEFINED/WRONG VALUE"
        end
        if ($arg0 == 0)
            printf "UNKNOWN"
        end
        if ($arg0 == 1)
            printf "JMP"
        end
        if ($arg0 == 2)
            printf "JCC"
        end
        if ($arg0 == 3)
            printf "CALL"
        end
        if ($arg0 == 4)
            printf "RET"
        end
        if ($arg0 == 5)
            printf "INT"
        end
    end
end
document print_insn_type
Syntax: print_insn_type INSN_TYPE_NUMBER
| Print human-readable mnemonic for the instruction type (usually $INSN_TYPE).
end


define get_insn_type
    if $argc != 1
        help get_insn_type
    else
        set $INSN_TYPE = 0
        set $_byte1 = *(unsigned char *)$arg0
        if ($_byte1 == 0x9A || $_byte1 == 0xE8)
            # "call"
            set $INSN_TYPE = 3
        end
        if ($_byte1 >= 0xE9 && $_byte1 <= 0xEB)
            # "jmp"
            set $INSN_TYPE = 1
        end
        if ($_byte1 >= 0x70 && $_byte1 <= 0x7F)
            # "jcc"
            set $INSN_TYPE = 2
        end
        if ($_byte1 >= 0xE0 && $_byte1 <= 0xE3 )
            # "jcc"
            set $INSN_TYPE = 2
        end
        if ($_byte1 == 0xC2 || $_byte1 == 0xC3 || $_byte1 == 0xCA || \
            $_byte1 == 0xCB || $_byte1 == 0xCF)
            # "ret"
            set $INSN_TYPE = 4
        end
        if ($_byte1 >= 0xCC && $_byte1 <= 0xCE)
            # "int"
            set $INSN_TYPE = 5
        end
        if ($_byte1 == 0x0F )
            # two-byte opcode
            set $_byte2 = *(unsigned char *)($arg0 + 1)
            if ($_byte2 >= 0x80 && $_byte2 <= 0x8F)
                # "jcc"
                set $INSN_TYPE = 2
            end
        end
        if ($_byte1 == 0xFF)
            # opcode extension
            set $_byte2 = *(unsigned char *)($arg0 + 1)
            set $_opext = ($_byte2 & 0x38)
            if ($_opext == 0x10 || $_opext == 0x18)
                # "call"
                set $INSN_TYPE = 3
            end
            if ($_opext == 0x20 || $_opext == 0x28)
                # "jmp"
                set $INSN_TYPE = 1
            end
        end
    end
end
document get_insn_type
Syntax: get_insn_type ADDR
| Recognize instruction type at address ADDR.
| Take address ADDR and set the global $INSN_TYPE variable to
| 0, 1, 2, 3, 4, 5 if the instruction at that address is
| unknown, a jump, a conditional jump, a call, a return, or an interrupt.
end


define step_to_call
    set $_saved_ctx = $SHOW_CONTEXT
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 0

    set logging file /dev/null
    set logging redirect on
    set logging on

    set $_cont = 1
    while ($_cont > 0)
        stepi
        get_insn_type $pc
        if ($INSN_TYPE == 3)
            set $_cont = 0
        end
    end

    set logging off

    if ($_saved_ctx > 0)
        context
    end

    set $SHOW_CONTEXT = $_saved_ctx
    set $SHOW_NEST_INSN = 0

    set logging file ~/gdb.txt
    set logging redirect off
    set logging on

    printf "step_to_call command stopped at:\n  "
    x/i $pc
    printf "\n"
    set logging off

end
document step_to_call
Syntax: step_to_call
| Single step until a call instruction is found.
| Stop before the call is taken.
| Log is written into the file ~/gdb.txt.
end


define trace_calls

    printf "Tracing...please wait...\n"

    set $_saved_ctx = $SHOW_CONTEXT
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 0
    set $_nest = 1
    set listsize 0

    set logging overwrite on
    set logging file ~/gdb_trace_calls.txt
    set logging on
    set logging off
    set logging overwrite off

    while ($_nest > 0)
        get_insn_type $pc
        # handle nesting
        if ($INSN_TYPE == 3)
            set $_nest = $_nest + 1
        else
            if ($INSN_TYPE == 4)
                set $_nest = $_nest - 1
            end
        end
        # if a call, print it
        if ($INSN_TYPE == 3)
            set logging file ~/gdb_trace_calls.txt
            set logging redirect off
            set logging on

            set $x = $_nest - 2
            while ($x > 0)
                printf "\t"
                set $x = $x - 1
            end
            x/i $pc
        end

        set logging off
        set logging file /dev/null
        set logging redirect on
        set logging on
        stepi
        set logging redirect off
        set logging off
    end

    set $SHOW_CONTEXT = $_saved_ctx
    set $SHOW_NEST_INSN = 0

    printf "Done, check ~/gdb_trace_calls.txt\n"
end
document trace_calls
Syntax: trace_calls
| Create a runtime trace of the calls made by target.
| Log overwrites(!) the file ~/gdb_trace_calls.txt.
end


define trace_run

    printf "Tracing...please wait...\n"

    set $_saved_ctx = $SHOW_CONTEXT
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 1
    set logging overwrite on
    set logging file ~/gdb_trace_run.txt
    set logging redirect on
    set logging on
    set $_nest = 1

    while ( $_nest > 0 )

        get_insn_type $pc
        # jmp, jcc, or cll
        if ($INSN_TYPE == 3)
            set $_nest = $_nest + 1
        else
            # ret
            if ($INSN_TYPE == 4)
                set $_nest = $_nest - 1
            end
        end
        stepi
    end

    printf "\n"

    set $SHOW_CONTEXT = $_saved_ctx
    set $SHOW_NEST_INSN = 0
    set logging redirect off
    set logging off

    # clean up trace file
    shell  grep -v ' at ' ~/gdb_trace_run.txt > ~/gdb_trace_run.1
    shell  grep -v ' in ' ~/gdb_trace_run.1 > ~/gdb_trace_run.txt
    shell  rm -f ~/gdb_trace_run.1
    printf "Done, check ~/gdb_trace_run.txt\n"
end
document trace_run
Syntax: trace_run
| Create a runtime trace of target.
| Log overwrites(!) the file ~/gdb_trace_run.txt.
end

# ____________________misc____________________
define hook-stop
    # this makes 'context' be called at every BP/step
    if ($SHOW_CONTEXT > 0)
        context
    end
end
document hook-stop
Syntax: hook-stop
| !!! FOR INTERNAL USE ONLY - DO NOT CALL !!!
end


define dump_hexfile
    dump ihex memory $arg0 $arg1 $arg2
end
document dump_hexfile
Syntax: dump_hexfile FILENAME ADDR1 ADDR2
| Write a range of memory to a file in Intel ihex (hexdump) format.
| The range is specified by ADDR1 and ADDR2 addresses.
end


define dump_binfile
    dump memory $arg0 $arg1 $arg2
end
document dump_binfile
Syntax: dump_binfile FILENAME ADDR1 ADDR2
| Write a range of memory to a binary file.
| The range is specified by ADDR1 and ADDR2 addresses.
end

define cls
    shell clear
end
document cls
Syntax: cls
| Clear screen.
end


define search
    set $start = (char *) $arg0
    set $end = (char *) $arg1
    set $pattern = (short) $arg2
    set $p = $start
    while $p < $end
        if (*(short *) $p) == $pattern
            printf "pattern 0x%hx found at 0x%x\n", $pattern, $p
        end
        set $p++
    end
end
document search
Syntax: search <START> <END> <PATTERN>
| Search for the given pattern beetween $start and $end address.
end

# enable commands for different displays
define enablecpuregisters
	set $SHOWCPUREGISTERS = 1
end
document enablecpuregisters
Syntax: enablecpuregisters
| Enable display of cpu registers in the context window.
end


define enablestack
	set $SHOWSTACK = 1
end
document enablestack
Syntax: enablestack
| Enable display of stack in the context window.
end


define enabledatawin
	set $SHOWDATAWIN = 1
end
document enabledatawin
Syntax: enabledatawin
| Enable display of data window in the context window.
end

define disablecpuregisters
	set $SHOWCPUREGISTERS = 0
end
document disablecpuregisters
Syntax: disablecpuregisters
| Disable display of cpu registers in the context window.
end


define disablestack
	set $SHOWSTACK = 0
end
document disablestack
Syntax: disablestack
| Disable display of stack information in the context window.
end


define disabledatawin
	set $SHOWDATAWIN = 0
end
document disabledatawin
Syntax: disabledatawin
| Disable display of data window in the context window.
end




# defining it here doesn't get the space #$#$%"#!
define disablecolorprompt
    set prompt gdb$
end
document disablecolorprompt
| Remove color from prompt
end

define enablecolorprompt
    set prompt \033[31mgdb$ \033[0m
end
document enablecolorprompt
| Enable color prompt
end


define get_bits
    if $argc != 1
        help get_bits
    end
    shell python tools/bitset.py $arg0

document get_bits
| Syntax: get_bits 0xVALUE
end


define flags
# conditional flags are
# negative/less than (N), bit 31 of CPSR
# zero (Z), bit 30
# Carry/Borrow/Extend (C), bit 29
# Overflow (V), bit 28
    # negative/less than (N), bit 31 of CPSR
    if (($cpsr >> 0x1f) & 1)
        printf "N "
	    set $_n_flag = 1
    else
        printf "n "
	    set $_n_flag = 0
    end
    # zero (Z), bit 30
    if (($cpsr >> 0x1e) & 1)
        printf "Z "
	    set $_z_flag = 1
    else
        printf "z "
	    set $_z_flag = 0
    end
    # Carry/Borrow/Extend (C), bit 29
    if (($cpsr >> 0x1d) & 1)
        printf "C "
    	set $_c_flag = 1
    else
        printf "c "
	    set $_c_flag = 0
    end
    # Overflow (V), bit 28
    if (($cpsr >> 0x1c) & 1)
        printf "V "
        set $_v_flag = 1
    else
        printf "v "
        set $_v_flag = 0
    end
    # Sticky overflow (Q), bit 27
    if (($cpsr >> 0x1b) & 1)
        printf "Q "
        set $_q_flag = 1
    else
        printf "q "
        set $_q_flag = 0
    end
    # Java state bit (J), bit 24
    # When T=1:
    # J = 0 The processor is in Thumb state.
    # J = 1 The processor is in ThumbEE state.
    if (($cpsr >> 0x18) & 1)
        printf "J "
        set $_j_flag = 1
    else
        printf "j "
        set $_j_flag = 0
    end
    # Data endianness bit (E), bit 9
    if (($cpsr >> 9) & 1)
        printf "E "
        set $_e_flag = 1
    else
        printf "e "
        set $_e_flag = 0
    end
    # Imprecise abort disable bit (A), bit 8
    # The A bit is set to 1 automatically. It is used to disable imprecise data aborts.
    # It might not be writable in the Nonsecure state if the AW bit in the SCR register is reset.
    if (($cpsr >> 8) & 1)
        printf "A "
        set $_a_flag = 1
    else
        printf "a "
        set $_a_flag = 0
    end
    # IRQ disable bit (I), bit 7
    # When the I bit is set to 1, IRQ interrupts are disabled.
    if (($cpsr >> 7) & 1)
        printf "I "
        set $_i_flag = 1
    else
        printf "i "
        set $_i_flag = 0
    end
    # FIQ disable bit (F), bit 6
    # When the F bit is set to 1, FIQ interrupts are disabled.
    # FIQ can be nonmaskable in the Nonsecure state if the FW bit in SCR register is reset.
    if (($cpsr >> 6) & 1)
        printf "F "
        set $_f_flag = 1
    else
        printf "f "
        set $_f_flag = 0
    end
    # Thumb state bit (F), bit 5
    # if 1 then the processor is executing in Thumb state or ThumbEE state depending on the J bit
    if (($cpsr >> 5) & 1)
        printf "T "
        set $_t_flag = 1
    else
        printf "t "
        set $_t_flag = 0
    end
    # TODO: GE bit ?
end
document flags
Syntax: flags
| Auxiliary function to set ARM cpu flags.
end


define con_ocd
    target extended-remote 127.0.0.1:3333
end

define con_stu
    target extended-remote 127.0.0.1:4242
end

define erase
    monitor flash erase_address 0x08000000 0x00100000
end

define flash_rw
    monitor flash protect 0 0 last off
end

define flash_ro
    monitor flash protect 0 0 last on
end


define reset
	mon reset halt
end


define burn
    monitor reset halt
    monitor flash protect 0 0 last off
	monitor flash erase_address pad 0x08000000 0x00100000
	monitor flash write_image $arg0
    monitor reset halt
end

define px
    printf "%x\n", (char *) $arg0
end


define vtor
    printf "%x\n", *0xe000ed08
end

define cpuid
    printf "%x\n", *0xe000ed00
end

define mpu
    printf "%x\n", *0xE000ED90
end

define nvic
    printf "%x\n", *0xE000Ef00
end

define icsr
    printf "%x\n", *0xE000ED04
end


